name: Update build status workflow

on:
  pull_request_target:
    types: [opened, reopened, synchronize]

jobs:
  stale:
    runs-on: ubuntu-20.04
    steps:
      - name: "Update build status"
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const endpoint = "GET /repos/:owner/:repo/pulls?state=:state"
            const params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            }

            const maybeReady = ["clean", "has_hooks", "unknown", "unstable"];
            const notReady = ["dirty", "draft"];

            for await (const prs of client.paginate.iterator(endpoint,params)) {
              const prs = prs.data.filter(pr => {
                console.log("Mergeable state:" + pr.mergeable_state);
                if (pr.mergeable_state == null || maybeReady.includes(pr.mergeable_state)) {
                  const checkRuns = await github.request('GET /repos/{owner}/{repo}/commits/{ref}/check-runs', {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: pr.head.sha
                  })

                  if (checkRuns[0].name == "Build and test" && checkRuns[0].status == "in_progress") {
                    const params = JSON.parse(checkRuns[0].output.text)  // text contains parameters to make request in JSON
                    const { conclusion } = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}', params)

                    if (conclusion == "success" || conclusion == "failure") {
                      await github.request('PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}', {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        check_run_id: checkRuns[0].id,
                        status: 'completed',
                        conclusion: conclusion
                      })
                    }
                  }
                }
              }
            }
